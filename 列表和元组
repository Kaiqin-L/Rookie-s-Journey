列表和元组都是可以存放任意数据类型的有序集合
但是列表是动态的，它的空间是可变的，可以对其进行增加和删除操作，以及改变列表中的元素

  a=[1,2,3]
  a[0]=2
  a
>>>[2,2,3]
  a.append(4)
  a
>>>[2,2,3,4]

而元组是静态的，一旦创建，它的空间大小就是固定的，无法对其进行增删操作。除非创建新的元组

  tup=（1，2，3）
  tup1=tup+（5，）
  tup1
>>>(1,2,3,5)

空列表和空元组占用的空间大小也不同
  B=[]
  print(B.__sizeof__())   #分配40个字节
>>40

  C=()
  print(C.__sizeof__())  
>>24

//在python3.7版本中，元组和列表中每增加一个元素就增加8个字节

  E=[1,2,7]
  print(E.__sizeof__())    #列表中每增加一个int型元素，就多分配8个字节
>>>64

  D=("str",'ing',7.78914)
  print(D.__sizeof__())    #增加字符串类型和float类型也只增加8个字节？
>>48

思考：以如下两种方式创建空列表，那种方式更具有效率？
   A=list(())  ； B=[]
从字节分配上来说，二者分配的字节大小是一样多的。
   print(A.__sizeof__())  #40字节
   print(B.__sizeof__())  #40字节

但是调用list（）函数时，需要检查参数等，会带来开销。因此，创建空列表采用B方式更具有效率。
